*#define CHECK

#if 0
* hgaga-SquaredME.F
* assembly of squared matrix element
* generated by FormCalc 7.5 on 27-Sep-2012 9:09
* this file is part of FeynHiggs
#endif

#include "hgaga-vars.h"

************************************************************************

	RealType function hgaga_sumup(CCloop, CCtree)
	implicit none

#include "hgaga-vars.h"

	ComplexType CCloop(1), CCtree(1)
	ComplexType m

	hgaga_sumup = 0

	m = 0
	m = m + CCloop(1)*1
	hgaga_sumup = hgaga_sumup + Re(Conjugate(CCtree(1))*m)
	end

************************************************************************

	subroutine hgaga_SquaredMEHel(result)
	implicit none
	RealType result(*)

#include "hgaga-vars.h"

	RealType hgaga_sumup
	external hgaga_sumup

* hgaga-BEGIN ABBR_HEL
	call hgaga_abbr1hel
* hgaga-END ABBR_HEL

* hgaga-BEGIN FF_INI
	Cloop(1) = 0
* hgaga-END FF_INI

* hgaga-BEGIN FF_LOOP
	call hgaga_v1

	LOOP(Cha4, 1,2,1)
	call hgaga_v1_Cha4
	ENDLOOP(Cha4)

	LOOP(Gen4, 1,3,1)
	call hgaga_v1_Gen4
	ENDLOOP(Gen4)

	LOOP(Sfe4, 1,2,1)
	LOOP(Gen4, 1,3,1)
	call hgaga_v1_Gen4_Sfe4
	ENDLOOP(Gen4)
	ENDLOOP(Sfe4)

	LOOP(Ind2, 1,3,1)
	LOOP(Ind1, 1,3,1)
	LOOP(All4, 1,6,1)
	call hgaga_v1_All4_Ind1_Ind2
	ENDLOOP(All4)
	ENDLOOP(Ind1)
	ENDLOOP(Ind2)

	result(2) = result(2) + hgaga_sumup(Cloop, Cloop)
* hgaga-END FF_LOOP
	end

************************************************************************

	subroutine hgaga_SquaredME(result, helicities)
	implicit none
	RealType result(*)
	integer helicities

#include "hgaga-vars.h"

* hgaga-BEGIN VARDECL
	external hgaga_SquaredMEHel

	integer Hel1, Hel2, Hel3
	equivalence (Hel(1), Hel1)
	equivalence (Hel(2), Hel2)
	equivalence (Hel(3), Hel3)

* hgaga-END VARDECL

#include "inline.h"

* hgaga-BEGIN INVARIANTS
* hgaga-END INVARIANTS

* hgaga-BEGIN ABBR_S
	call hgaga_abbr1s
* hgaga-END ABBR_S

* hgaga-BEGIN ABBR_ANGLE
* hgaga-END ABBR_ANGLE

* hgaga-BEGIN RES_INI
	result(1) = 0
	result(2) = 0
* hgaga-END RES_INI

* hgaga-BEGIN HEL_LOOPS

	LOOP_HEL(Hel2)
	TEST(helicities, BIT_HEL(2))

	Hel3 = Hel2

	call hgaga_SquaredMEHel(result)

	ENDTEST(helicities, BIT_HEL(2))
	ENDLOOP_HEL(Hel2)

* hgaga-END HEL_LOOPS

#ifdef CHECK
	print *, 'tree =', result(1)
	print *, 'loop =', result(2)
	stop
#endif

* hgaga-END SQUAREDME
	end

