*#define CHECK

#if 0
* hhh-SquaredME.F
* assembly of squared matrix element
* generated by FormCalc 7.5 on 27-Sep-2012 9:11
* this file is part of FeynHiggs
#endif

#include "hhh-vars.h"

************************************************************************

	RealType function hhh_sumup(CCloop, CCtree)
	implicit none

#include "hhh-vars.h"

	ComplexType CCloop(1), CCtree(1)
	ComplexType m

	hhh_sumup = 0

	m = 0
	m = m + CCloop(1)*1
	hhh_sumup = hhh_sumup + Re(Conjugate(CCtree(1))*m)
	end

************************************************************************

	subroutine hhh_SquaredMEHel(result)
	implicit none
	RealType result(*)

#include "hhh-vars.h"

	RealType hhh_sumup
	external hhh_sumup

* hhh-BEGIN ABBR_HEL
* hhh-END ABBR_HEL

* hhh-BEGIN FF_INI
	Ctree(1) = 0

	Cloop(1) = 0
* hhh-END FF_INI

* hhh-BEGIN FF_TREE
	call hhh_v0

	result(1) = result(1) + hhh_sumup(Ctree, Ctree)
* hhh-END FF_TREE

* hhh-BEGIN FF_LOOP
	call hhh_v1

	LOOP(Gen4, 1,3,1)
	call hhh_v1_Gen4
	ENDLOOP(Gen4)

	LOOP(Cha5, 1,2,1)
	LOOP(Cha4, 1,2,1)
	call hhh_v1_Cha4_Cha5
	ENDLOOP(Cha4)
	ENDLOOP(Cha5)

	LOOP(Sfe4, 1,2,1)
	LOOP(Gen4, 1,3,1)
	call hhh_v1_Gen4_Sfe4
	ENDLOOP(Gen4)
	ENDLOOP(Sfe4)

	LOOP(Neu5, 1,4,1)
	LOOP(Neu4, 1,4,1)
	call hhh_v1_Neu4_Neu5
	ENDLOOP(Neu4)
	ENDLOOP(Neu5)

	LOOP(Cha6, 1,2,1)
	LOOP(Cha5, 1,2,1)
	LOOP(Cha4, 1,2,1)
	call hhh_v1_Cha4_Cha5_Cha6
	ENDLOOP(Cha4)
	ENDLOOP(Cha5)
	ENDLOOP(Cha6)

	LOOP(Sfe5, 1,2,1)
	LOOP(Sfe4, 1,2,1)
	LOOP(Gen4, 1,3,1)
	call hhh_v1_Gen4_Sfe4_Sfe5
	ENDLOOP(Gen4)
	ENDLOOP(Sfe4)
	ENDLOOP(Sfe5)

	LOOP(Neu6, 1,4,1)
	LOOP(Neu5, 1,4,1)
	LOOP(Neu4, 1,4,1)
	call hhh_v1_Neu4_Neu5_Neu6
	ENDLOOP(Neu4)
	ENDLOOP(Neu5)
	ENDLOOP(Neu6)

	LOOP(Sfe6, 1,2,1)
	LOOP(Sfe5, 1,2,1)
	LOOP(Sfe4, 1,2,1)
	LOOP(Gen4, 1,3,1)
	call hhh_v1_Gen4_Sfe4_Sfe5_Sfe6
	ENDLOOP(Gen4)
	ENDLOOP(Sfe4)
	ENDLOOP(Sfe5)
	ENDLOOP(Sfe6)

	result(2) = result(2) + 2*hhh_sumup(Cloop, Ctree)
	result(2) = result(2) + hhh_sumup(Cloop, Cloop)
* hhh-END FF_LOOP
	end

************************************************************************

	subroutine hhh_SquaredME(result, helicities)
	implicit none
	RealType result(*)
	integer helicities

#include "hhh-vars.h"

* hhh-BEGIN VARDECL
	external hhh_SquaredMEHel

	integer Hel1, Hel2, Hel3
	equivalence (Hel(1), Hel1)
	equivalence (Hel(2), Hel2)
	equivalence (Hel(3), Hel3)

* hhh-END VARDECL

#include "inline.h"

* hhh-BEGIN INVARIANTS
* hhh-END INVARIANTS

* hhh-BEGIN ABBR_S
	call hhh_abbr0s
	call hhh_abbr1s
* hhh-END ABBR_S

* hhh-BEGIN ABBR_ANGLE
* hhh-END ABBR_ANGLE

* hhh-BEGIN RES_INI
	result(1) = 0
	result(2) = 0
* hhh-END RES_INI

* hhh-BEGIN HEL_LOOPS

	LOOP_HEL(Hel2)
	TEST(helicities, BIT_HEL(2))

	Hel3 = Hel2

	call hhh_SquaredMEHel(result)

	ENDTEST(helicities, BIT_HEL(2))
	ENDLOOP_HEL(Hel2)

* hhh-END HEL_LOOPS

#ifdef CHECK
	print *, 'tree =', result(1)
	print *, 'loop =', result(2)
	stop
#endif

* hhh-END SQUAREDME
	end

