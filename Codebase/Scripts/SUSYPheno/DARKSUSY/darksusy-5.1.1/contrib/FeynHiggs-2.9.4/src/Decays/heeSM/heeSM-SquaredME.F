*#define CHECK

#if 0
* heeSM-SquaredME.F
* assembly of squared matrix element
* generated by FormCalc 7.5 on 27-Sep-2012 9:08
* this file is part of FeynHiggs
#endif

#include "heeSM-vars.h"

************************************************************************

	RealType function heeSM_sumup(CCloop, CCtree)
	implicit none

#include "heeSM-vars.h"

	ComplexType CCloop(1), CCtree(1)
	ComplexType m

	heeSM_sumup = 0

	m = 0
	m = m + CCloop(1)*1
	heeSM_sumup = heeSM_sumup + Re(Conjugate(CCtree(1))*m)
	end

************************************************************************

	subroutine heeSM_SquaredMEHel(result)
	implicit none
	RealType result(*)

#include "heeSM-vars.h"

	RealType heeSM_sumup
	external heeSM_sumup

* heeSM-BEGIN ABBR_HEL
	call heeSM_abbr0hel
	call heeSM_abbr1hel
* heeSM-END ABBR_HEL

* heeSM-BEGIN FF_INI
	Ctree(1) = 0

	Cloop(1) = 0
* heeSM-END FF_INI

* heeSM-BEGIN FF_TREE
	call heeSM_v0

	result(1) = result(1) + heeSM_sumup(Ctree, Ctree)
* heeSM-END FF_TREE

* heeSM-BEGIN FF_LOOP
	call heeSM_v1

	result(2) = result(2) + 2*heeSM_sumup(Cloop, Ctree)
	result(2) = result(2) + heeSM_sumup(Cloop, Cloop)
* heeSM-END FF_LOOP
	end

************************************************************************

	subroutine heeSM_SquaredME(result, helicities)
	implicit none
	RealType result(*)
	integer helicities

#include "heeSM-vars.h"

* heeSM-BEGIN VARDECL
	external heeSM_SquaredMEHel

	integer Hel1, Hel2, Hel3
	equivalence (Hel(1), Hel1)
	equivalence (Hel(2), Hel2)
	equivalence (Hel(3), Hel3)

* heeSM-END VARDECL

#include "inline.h"

* heeSM-BEGIN INVARIANTS
* heeSM-END INVARIANTS

* heeSM-BEGIN ABBR_S
	call heeSM_abbr1s
* heeSM-END ABBR_S

* heeSM-BEGIN ABBR_ANGLE
* heeSM-END ABBR_ANGLE

* heeSM-BEGIN RES_INI
	result(1) = 0
	result(2) = 0
* heeSM-END RES_INI

* heeSM-BEGIN HEL_LOOPS

	LOOP_HEL(Hel2)
	TEST(helicities, BIT_HEL(2))

	Hel3 = Hel2

	call heeSM_SquaredMEHel(result)

	ENDTEST(helicities, BIT_HEL(2))
	ENDLOOP_HEL(Hel2)

* heeSM-END HEL_LOOPS

#ifdef CHECK
	print *, 'tree =', result(1)
	print *, 'loop =', result(2)
	stop
#endif

* heeSM-END SQUAREDME
	end

