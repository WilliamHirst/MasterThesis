*#define CHECK

#if 0
* hee-SquaredME.F
* assembly of squared matrix element
* generated by FormCalc 7.5 on 27-Sep-2012 9:15
* this file is part of FeynHiggs
#endif

#include "hee-vars.h"

************************************************************************

	RealType function hee_sumup(CCloop, CCtree)
	implicit none

#include "hee-vars.h"

	ComplexType CCloop(1), CCtree(1)
	ComplexType m

	hee_sumup = 0

	m = 0
	m = m + CCloop(1)*1
	hee_sumup = hee_sumup + Re(Conjugate(CCtree(1))*m)
	end

************************************************************************

	subroutine hee_SquaredMEHel(result)
	implicit none
	RealType result(*)

#include "hee-vars.h"

	RealType hee_sumup
	external hee_sumup

* hee-BEGIN ABBR_HEL
	call hee_abbr0hel
	call hee_abbr1hel
* hee-END ABBR_HEL

* hee-BEGIN FF_INI
	Ctree(1) = 0

	Cloop(1) = 0
* hee-END FF_INI

* hee-BEGIN FF_TREE
	call hee_v0

	result(1) = result(1) + hee_sumup(Ctree, Ctree)
* hee-END FF_TREE

* hee-BEGIN FF_LOOP
	call hee_v1

	LOOP(Cha4, 1,2,1)
	call hee_v1_Cha4
	ENDLOOP(Cha4)

	LOOP(Gen4, 1,3,1)
	call hee_v1_Gen4
	ENDLOOP(Gen4)

	LOOP(Ind1, 1,3,1)
	LOOP(All4, 1,6,1)
	call hee_v1_All4_Ind1
	ENDLOOP(All4)
	ENDLOOP(Ind1)

	LOOP(Cha5, 1,2,1)
	LOOP(Cha4, 1,2,1)
	call hee_v1_Cha4_Cha5
	ENDLOOP(Cha4)
	ENDLOOP(Cha5)

	LOOP(Sfe4, 1,2,1)
	LOOP(Gen4, 1,3,1)
	call hee_v1_Gen4_Sfe4
	ENDLOOP(Gen4)
	ENDLOOP(Sfe4)

	LOOP(Neu5, 1,4,1)
	LOOP(Neu4, 1,4,1)
	call hee_v1_Neu4_Neu5
	ENDLOOP(Neu4)
	ENDLOOP(Neu5)

	LOOP(Sfe5, 1,2,1)
	LOOP(Sfe4, 1,2,1)
	LOOP(Gen4, 1,3,1)
	call hee_v1_Gen4_Sfe4_Sfe5
	ENDLOOP(Gen4)
	ENDLOOP(Sfe4)
	ENDLOOP(Sfe5)

	LOOP(Sfe4, 1,2,1)
	LOOP(Neu5, 1,4,1)
	LOOP(Neu4, 1,4,1)
	call hee_v1_Neu4_Neu5_Sfe4
	ENDLOOP(Neu4)
	ENDLOOP(Neu5)
	ENDLOOP(Sfe4)

	LOOP(Sfe5, 1,2,1)
	LOOP(Sfe4, 1,2,1)
	LOOP(Neu4, 1,4,1)
	call hee_v1_Neu4_Sfe4_Sfe5
	ENDLOOP(Neu4)
	ENDLOOP(Sfe4)
	ENDLOOP(Sfe5)

	LOOP(Ind3, 1,3,1)
	LOOP(Ind2, 1,3,1)
	LOOP(Ind1, 1,3,1)
	LOOP(All5, 1,6,1)
	LOOP(All4, 1,6,1)
	call hee_v1_All4_All5_Ind1_Ind2Ind3
	ENDLOOP(All4)
	ENDLOOP(All5)
	ENDLOOP(Ind1)
	ENDLOOP(Ind2)
	ENDLOOP(Ind3)

	LOOP(Ind4, 1,3,1)
	LOOP(Ind3, 1,3,1)
	LOOP(Ind2, 1,3,1)
	LOOP(Ind1, 1,3,1)
	LOOP(All5, 1,6,1)
	LOOP(All4, 1,6,1)
	call hee_v1_All4All5Ind1Ind2Ind3Id4
	ENDLOOP(All4)
	ENDLOOP(All5)
	ENDLOOP(Ind1)
	ENDLOOP(Ind2)
	ENDLOOP(Ind3)
	ENDLOOP(Ind4)

	result(2) = result(2) + 2*hee_sumup(Cloop, Ctree)
	result(2) = result(2) + hee_sumup(Cloop, Cloop)
* hee-END FF_LOOP
	end

************************************************************************

	subroutine hee_SquaredME(result, helicities)
	implicit none
	RealType result(*)
	integer helicities

#include "hee-vars.h"

* hee-BEGIN VARDECL
	external hee_SquaredMEHel

	integer Hel1, Hel2, Hel3
	equivalence (Hel(1), Hel1)
	equivalence (Hel(2), Hel2)
	equivalence (Hel(3), Hel3)

* hee-END VARDECL

#include "inline.h"

* hee-BEGIN INVARIANTS
* hee-END INVARIANTS

* hee-BEGIN ABBR_S
	call hee_abbr1s
* hee-END ABBR_S

* hee-BEGIN ABBR_ANGLE
* hee-END ABBR_ANGLE

* hee-BEGIN RES_INI
	result(1) = 0
	result(2) = 0
* hee-END RES_INI

* hee-BEGIN HEL_LOOPS

	LOOP_HEL(Hel2)
	TEST(helicities, BIT_HEL(2))

	Hel3 = Hel2

	call hee_SquaredMEHel(result)

	ENDTEST(helicities, BIT_HEL(2))
	ENDLOOP_HEL(Hel2)

* hee-END HEL_LOOPS

#ifdef CHECK
	print *, 'tree =', result(1)
	print *, 'loop =', result(2)
	stop
#endif

* hee-END SQUAREDME
	end

