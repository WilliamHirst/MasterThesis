****************************************************
*** subroutine dsanuffsff                        ***
*** fermion + fermion -> fermion + fermion in    ***
*** u-channel scalar exchange (index k)          ***
*** 1 - arrow in, 2 - arrow out, k intermediate  ***
*** this code is computer generated by reduce    ***
*** and gentran.                                 ***
*** author: joakim edsjo, edsjo@physto.se        ***
****************************************************

      subroutine dsanuffsff(p,costheta,kp1,kp2,kpk,kp3,kp4)
      implicit none

      include 'dsmssm.h'
      include 'dsandiacom.h'
      integer kp1,kp2,kpk,kp3,kp4
      real*8 p,costheta
      complex*16 du,gp2,gm2,gx2,gy2

      call dsankinvar(p,costheta,kp1,kp2,kpk,kp3,kp4)
      if (s.lt.(mp3+mp4)**2) return
      if (gl(kpk,kp3,kp2).eq.dcmplx(0.d0,0.d0).and.
     &    gr(kpk,kp3,kp2).eq.dcmplx(0.0d0,0.0d0).and.
     &    gl(kpk,kp1,kp4).eq.dcmplx(0.0d0,0.0d0).and.
     &    gr(kpk,kp1,kp4).eq.dcmplx(0.0d0,0.0d0)) return

      du=1.0d0/dcmplx(mk**2-u,-width(kpk)*mk)
      gp2=gl(kpk,kp3,kp2)*gl(kpk,kp1,kp4)+
     &    gr(kpk,kp3,kp2)*gr(kpk,kp1,kp4)
      gm2=gl(kpk,kp3,kp2)*gl(kpk,kp1,kp4)-
     &    gr(kpk,kp3,kp2)*gr(kpk,kp1,kp4)
      gx2=gl(kpk,kp3,kp2)*gr(kpk,kp1,kp4)+
     &    gr(kpk,kp3,kp2)*gl(kpk,kp1,kp4)
      gy2=gl(kpk,kp3,kp2)*gr(kpk,kp1,kp4)-
     &    gr(kpk,kp3,kp2)*gl(kpk,kp1,kp4)

      aa(0,0,0,0)=aa(0,0,0,0)+((gp2*kpl*ppl-(gx2*kmi*pmi))*wd(1,0,0)+
     . efmi*emi*gx2+efpl*epl*gp2)*du
      aa(0,0,1,-1)=aa(0,0,1,-1)+(efmi*gm2*ppl+efpl*gy2*pmi+gp2*kmi*ppl
     . -(gx2*kpl*pmi))*wd(1,0,-1)*du
      aa(0,0,1,0)=aa(0,0,1,0)+((efmi*gy2*pmi+efpl*gm2*ppl)*wd(1,0,0)-(
     . emi*gy2*kmi)+epl*gm2*kpl)*du
      aa(0,0,1,1)=aa(0,0,1,1)+(efmi*gm2*ppl+efpl*gy2*pmi-(gp2*kmi*ppl)
     . +gx2*kpl*pmi)*wd(1,0,1)*du
      aa(1,-1,0,0)=aa(1,-1,0,0)-((emi*gm2*kpl-(epl*gy2*kmi)-(gp2*kpl*
     . pmi)+gx2*kmi*ppl)*wd(1,-1,0)*du)
      aa(1,-1,1,-1)=aa(1,-1,1,-1)-(((emi*gp2-(gm2*pmi))*efmi+(epl*gx2-
     . (gy2*ppl))*efpl+emi*gm2*kmi-(epl*gy2*kpl)-(gp2*kmi*pmi)+gx2*kpl
     . *ppl)*wd(1,-1,-1)*du)
      aa(1,-1,1,0)=aa(1,-1,1,0)-(((emi*gp2-(gm2*pmi))*efpl+(epl*gx2-(
     . gy2*ppl))*efmi)*wd(1,-1,0)*du)
      aa(1,-1,1,1)=aa(1,-1,1,1)-(((emi*gp2-(gm2*pmi))*efmi+(epl*gx2-(
     . gy2*ppl))*efpl-(emi*gm2*kmi)+epl*gy2*kpl+gp2*kmi*pmi-(gx2*kpl*
     . ppl))*wd(1,-1,1)*du)
      aa(1,0,0,0)=aa(1,0,0,0)+((emi*gy2*kmi-(epl*gm2*kpl))*wd(1,0,0)-(
     . efmi*gy2*pmi)-(efpl*gm2*ppl))*du
      aa(1,0,1,-1)=aa(1,0,1,-1)-((efmi*epl*gp2+efpl*emi*gx2-(emi*gy2*
     . kpl)+epl*gm2*kmi)*wd(1,0,-1)*du)
      aa(1,0,1,0)=aa(1,0,1,0)-(((efmi*emi*gx2+efpl*epl*gp2)*wd(1,0,0)+
     . gp2*kpl*ppl-(gx2*kmi*pmi))*du)
      aa(1,0,1,1)=aa(1,0,1,1)-((efmi*epl*gp2+efpl*emi*gx2+emi*gy2*kpl-
     . (epl*gm2*kmi))*wd(1,0,1)*du)
      aa(1,1,0,0)=aa(1,1,0,0)-((emi*gm2*kpl-(epl*gy2*kmi)+gp2*kpl*pmi-
     . (gx2*kmi*ppl))*wd(1,1,0)*du)
      aa(1,1,1,-1)=aa(1,1,1,-1)-(((emi*gp2+gm2*pmi)*efmi+(epl*gx2+gy2*
     . ppl)*efpl+emi*gm2*kmi-(epl*gy2*kpl)+gp2*kmi*pmi-(gx2*kpl*ppl))*
     . wd(1,1,-1)*du)
      aa(1,1,1,0)=aa(1,1,1,0)-(((emi*gp2+gm2*pmi)*efpl+(epl*gx2+gy2*
     . ppl)*efmi)*wd(1,1,0)*du)
      aa(1,1,1,1)=aa(1,1,1,1)-(((emi*gp2+gm2*pmi)*efmi+(epl*gx2+gy2*
     . ppl)*efpl-(emi*gm2*kmi)+epl*gy2*kpl-(gp2*kmi*pmi)+gx2*kpl*ppl)*
     . wd(1,1,1)*du)

      return

      end
