****************************************************
*** subroutine dsanufffsvin                      ***
*** fermion + fermion -> scalar + gauge boson in ***
*** u-channel fermion exchange (index k)         ***
*** 1 - arrow in, 2 - arrow out, k intermediate  ***
*** both fermion arrows point inwards            ***
*** this code is computer generated by reduce    ***
*** and gentran.                                 ***
*** author: joakim edsjo, edsjo@physto.se        ***
****************************************************

      subroutine dsanufffsvin(p,costheta,kp1,kp2,kpk,kp3,kp4)
      implicit none

      include 'dsmssm.h'
      include 'dsandiacom.h'
      integer kp1,kp2,kpk,kp3,kp4
      real*8 p,costheta
      complex*16 du,gp2,gm2,gx2,gy2

      call dsankinvar(p,costheta,kp1,kp2,kpk,kp3,kp4)
      if (s.lt.(mp3+mp4)**2) return
      du=1.0d0/dcmplx(mk**2-u,-width(kpk)*mk)
      gp2=gl(kp3,kpk,kp2)*gl(kp4,kpk,kp1)+
     &    gr(kp3,kpk,kp2)*gr(kp4,kpk,kp1)
      gm2=gl(kp3,kpk,kp2)*gl(kp4,kpk,kp1)-
     &    gr(kp3,kpk,kp2)*gr(kp4,kpk,kp1)
      gx2=gl(kp3,kpk,kp2)*gr(kp4,kpk,kp1)+
     &    gr(kp3,kpk,kp2)*gl(kp4,kpk,kp1)
      gy2=gl(kp3,kpk,kp2)*gr(kp4,kpk,kp1)-
     &    gr(kp3,kpk,kp2)*gl(kp4,kpk,kp1)

      if (kp4.eq.kgamma) then

      aa(0,0,0,-1)=aa(0,0,0,-1)-(dsqrt(2.0d0)*(e2*gm2*ppl-(e3*gm2*ppl)
     . -(epl*gm2*pp)-(gp2*kk*ppl)+gy2*mk*pmi)*wd(1,0,1)*du)
      aa(0,0,0,1)=aa(0,0,0,1)-(dsqrt(2.0d0)*(e2*gm2*ppl-(e3*gm2*ppl)-(
     . epl*gm2*pp)+gp2*kk*ppl+gy2*mk*pmi)*wd(1,0,-1)*du)
      aa(1,-1,0,-1)=aa(1,-1,0,-1)+dsqrt(2.0d0)*((e2-e3)*(emi*gp2-(gm2*
     . pmi))-((emi*gm2-(gp2*pmi))*(kk-pp))+epl*gx2*mk-(gy2*mk*ppl))*wd
     . (1,-1,1)*du
      aa(1,-1,0,1)=aa(1,-1,0,1)+dsqrt(2.0d0)*((e2-e3)*(emi*gp2-(gm2*
     . pmi))+(emi*gm2-(gp2*pmi))*(kk+pp)+epl*gx2*mk-(gy2*mk*ppl))*wd(1
     . ,-1,-1)*du
      aa(1,0,0,-1)=aa(1,0,0,-1)+dsqrt(2.0d0)*(e2*epl*gp2-(e3*epl*gp2)+
     . emi*gx2*mk-(epl*gm2*kk)-(gp2*pp*ppl))*wd(1,0,1)*du
      aa(1,0,0,1)=aa(1,0,0,1)+dsqrt(2.0d0)*(e2*epl*gp2-(e3*epl*gp2)+
     . emi*gx2*mk+epl*gm2*kk-(gp2*pp*ppl))*wd(1,0,-1)*du
      aa(1,1,0,-1)=aa(1,1,0,-1)+dsqrt(2.0d0)*((e2-e3)*(emi*gp2+gm2*pmi
     . )-((emi*gm2+gp2*pmi)*(kk+pp))+epl*gx2*mk+gy2*mk*ppl)*wd(1,1,1)*
     . du
      aa(1,1,0,1)=aa(1,1,0,1)+dsqrt(2.0d0)*((e2-e3)*(emi*gp2+gm2*pmi)+
     . (emi*gm2+gp2*pmi)*(kk-pp)+epl*gx2*mk+gy2*mk*ppl)*wd(1,1,-1)*du

      else

      aa(0,0,0,-1)=aa(0,0,0,-1)-(dsqrt(2.0d0)*(e2*gm2*ppl-(e3*gm2*ppl)
     . -(epl*gm2*pp)-(gp2*kk*ppl)+gy2*mk*pmi)*wd(1,0,1)*du)
      aa(0,0,0,0)=aa(0,0,0,0)+(dsqrt(2.0d0)*(((epl*gm2*pp-(gy2*mk*pmi)
     . )*e4-(e2*e4*gm2*ppl)+e3*e4*gm2*ppl+gm2*kk**2*ppl)*wd(1,0,0)-((
     . e2*epl*gm2-(e3*epl*gm2)-(e4*epl*gm2)-(emi*gy2*mk)-(gm2*pp*ppl))
     . *kk))*du)/mp4
      aa(0,0,0,1)=aa(0,0,0,1)-(dsqrt(2.0d0)*(e2*gm2*ppl-(e3*gm2*ppl)-(
     . epl*gm2*pp)+gp2*kk*ppl+gy2*mk*pmi)*wd(1,0,-1)*du)
      aa(1,-1,0,-1)=aa(1,-1,0,-1)+dsqrt(2.0d0)*((e2-e3)*(emi*gp2-(gm2*
     . pmi))-((emi*gm2-(gp2*pmi))*(kk-pp))+epl*gx2*mk-(gy2*mk*ppl))*wd
     . (1,-1,1)*du
      aa(1,-1,0,0)=aa(1,-1,0,0)+(dsqrt(2.0d0)*((e2-e3)*(emi*gp2-(gm2*
     . pmi))*e4+(emi*gm2*pp+epl*gx2*mk-(gp2*pmi*pp)-(gy2*mk*ppl))*e4-(
     . emi*gp2*kk**2)+gm2*kk**2*pmi)*wd(1,-1,0)*du)/mp4
      aa(1,-1,0,1)=aa(1,-1,0,1)+dsqrt(2.0d0)*((e2-e3)*(emi*gp2-(gm2*
     . pmi))+(emi*gm2-(gp2*pmi))*(kk+pp)+epl*gx2*mk-(gy2*mk*ppl))*wd(1
     . ,-1,-1)*du
      aa(1,0,0,-1)=aa(1,0,0,-1)+dsqrt(2.0d0)*(e2*epl*gp2-(e3*epl*gp2)+
     . emi*gx2*mk-(epl*gm2*kk)-(gp2*pp*ppl))*wd(1,0,1)*du
      aa(1,0,0,0)=aa(1,0,0,0)+(dsqrt(2.0d0)*(((emi*gx2*mk-(gp2*pp*ppl)
     . )*e4+e2*e4*epl*gp2-(e3*e4*epl*gp2)-(epl*gp2*kk**2))*wd(1,0,0)+
     . e2*gp2*kk*ppl-(e3*gp2*kk*ppl)-(e4*gp2*kk*ppl)-(epl*gp2*kk*pp)-(
     . gx2*kk*mk*pmi))*du)/mp4
      aa(1,0,0,1)=aa(1,0,0,1)+dsqrt(2.0d0)*(e2*epl*gp2-(e3*epl*gp2)+
     . emi*gx2*mk+epl*gm2*kk-(gp2*pp*ppl))*wd(1,0,-1)*du
      aa(1,1,0,-1)=aa(1,1,0,-1)+dsqrt(2.0d0)*((e2-e3)*(emi*gp2+gm2*pmi
     . )-((emi*gm2+gp2*pmi)*(kk+pp))+epl*gx2*mk+gy2*mk*ppl)*wd(1,1,1)*
     . du
      aa(1,1,0,0)=aa(1,1,0,0)+(dsqrt(2.0d0)*((e2-e3)*(emi*gp2+gm2*pmi)
     . *e4-((emi*gm2*pp-(epl*gx2*mk)+gp2*pmi*pp-(gy2*mk*ppl))*e4)-(emi
     . *gp2*kk**2)-(gm2*kk**2*pmi))*wd(1,1,0)*du)/mp4
      aa(1,1,0,1)=aa(1,1,0,1)+dsqrt(2.0d0)*((e2-e3)*(emi*gp2+gm2*pmi)+
     . (emi*gm2+gp2*pmi)*(kk-pp)+epl*gx2*mk+gy2*mk*ppl)*wd(1,1,-1)*du

      endif

      return

      end







