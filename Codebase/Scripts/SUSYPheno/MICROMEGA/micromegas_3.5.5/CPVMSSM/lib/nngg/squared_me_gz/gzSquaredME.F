*#define CHECK

* gzSquaredME.F
* assembly of squared matrix element
* generated by FormCalc 12 Apr 2013 17:41

	subroutine gzSquaredME(result, helicities, flags)
	implicit none
	double precision result(*)
	integer helicities, flags
	logical reset

#include "gzvars.h"

	double precision gzsumup
	external gzsumup

	integer Cptr, Dptr, Eptr
	integer Hel1, Hel2, Hel3, Hel4
	equivalence (Hel(1), Hel1)
	equivalence (Hel(2), Hel2)
	equivalence (Hel(3), Hel3)
	equivalence (Hel(4), Hel4)

      reset=.true.
	S = SInvariant(1,2)

	T = TInvariant(1,3)

	U = TInvariant(2,3)

	if( reset ) then
	  call setcachelast(Ccache, 0)
	  call setcachelast(Dcache, 0)
*	  call setcachelast(Ecache, 0)

	call gzabbr1_s
	
	  reset = .FALSE.
	endif
	Cptr = getcachelast(Ccache)
	Dptr = getcachelast(Dcache)
*	Eptr = getcachelast(Ecache)


	call gzabbr1_angle

	result(1) = 0
	result(2) = 0

#define Test(i) if( .not. btest(helicities, 3*(4 - i) + 1 + Hel(i)) ) goto i

	do Hel1 = -1, 1
	Test(1)
	do Hel2 = -1, 1
	Test(2)
	do Hel3 = -1, 1
	Test(3)
	do Hel4 = -1, 1
	Test(4)

	call gzabbr1_hel1
	call gzabbr1_hel2

	Cloop(1) = 0


	call gzvert

	do cha5 = 1,2
	call gzbox_cha51
	call gzbox_cha52
	enddo

	do his5 = 1,3
	call gzvert_his5
	enddo

	do lpd5 = 1,3
	call gzvert_lpd5
	call gzbox_lpd51
	call gzbox_lpd52
	enddo

	do neu5 = 1,4
	call gzvert_neu5
	enddo

	do qud5 = 1,3
	call gzvert_qud5
	call gzbox_qud51
	call gzbox_qud52
	call gzbox_qud53
	enddo

	do quu5 = 1,3
	call gzvert_quu5
	call gzbox_quu51
	call gzbox_quu52
	call gzbox_quu53
	enddo

	do sld5 = 1,3
	call gzvert_sld5
	enddo

	do sle5 = 1,3
	call gzvert_sle5
	enddo

	do sqd5 = 1,3
	call gzvert_sqd5
	enddo

	do sqe5 = 1,3
	call gzvert_sqe5
	enddo

	do squ5 = 1,3
	call gzvert_squ5
	enddo

	do sqv5 = 1,3
	call gzvert_sqv5
	enddo

	do cha6 = 1,2
	do cha5 = 1,2
	call gzvert_cha5_cha6
	call gzbox_cha5_cha61
	call gzbox_cha5_cha62
	call gzbox_cha5_cha63
	call gzbox_cha5_cha64
	enddo
	enddo

	do neu5 = 1,4
	do cha5 = 1,2
	call gzvert_cha5_neu51
	call gzvert_cha5_neu52
	enddo
	enddo

	do lpd5 = 1,3
	do his5 = 1,3
	call gzvert_his5_lpd5
	enddo
	enddo

	do qud5 = 1,3
	do his5 = 1,3
	call gzvert_his5_qud5
	enddo
	enddo

	do quu5 = 1,3
	do his5 = 1,3
	call gzvert_his5_quu5
	enddo
	enddo

	do sld5 = 1,3
	do his5 = 1,3
	call gzvert_his5_sld5
	enddo
	enddo

	do sle5 = 1,3
	do his5 = 1,3
	call gzvert_his5_sle5
	enddo
	enddo

	do sqd5 = 1,3
	do his5 = 1,3
	call gzvert_his5_sqd5
	enddo
	enddo

	do sqe5 = 1,3
	do his5 = 1,3
	call gzvert_his5_sqe5
	enddo
	enddo

	do squ5 = 1,3
	do his5 = 1,3
	call gzvert_his5_squ5
	enddo
	enddo

	do sqv5 = 1,3
	do his5 = 1,3
	call gzvert_his5_sqv5
	enddo
	enddo

	do neu5 = 1,4
	do lpd5 = 1,3
	call gzvert_lpd5_neu5
	enddo
	enddo

	do qud5 = 1,3
	do neu5 = 1,4
	call gzvert_neu5_qud5
	enddo
	enddo

	do quu5 = 1,3
	do neu5 = 1,4
	call gzvert_neu5_quu5
	enddo
	enddo

	do his5 = 1,3
	do cha6 = 1,2
	do cha5 = 1,2
	call gzvert_cha5_cha6_his5
	enddo
	enddo
	enddo

	result(2) = result(2) + gzsumup(Cloop, Cloop)
4	enddo
3	enddo
2	enddo
1	enddo

	call setcachelast(Ccache, Cptr)
	call setcachelast(Dcache, Dptr)
*	call setcachelast(Ecache, Eptr)

#ifdef CHECK
	print *, 'S =', S
	print *, 'T =', T
	print *, 'U =', U

	print *, 'tree =', result(1)
	print *, 'loop =', result(2)
	stop
#endif
	end


************************************************************************

	double precision function gzsumup(CCloop, CCtree)
	implicit none

#include "gzvars.h"

	double complex CCloop(1), CCtree(1)
	double complex m

	gzsumup = 0

	m = 0
	m = m + CCloop(1)*1
	gzsumup = gzsumup + DBLE(DCONJG(CCtree(1))*m)
	end

