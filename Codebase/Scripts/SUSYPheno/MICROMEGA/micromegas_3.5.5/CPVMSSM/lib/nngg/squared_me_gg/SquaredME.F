*#define CHECK

* SquaredME.F
* assembly of squared matrix element
* generated by FormCalc 12 Apr 2013 15:13

	subroutine SquaredME(result, helicities, flags)
	implicit none
	double precision result(*)
	integer helicities, flags
	logical reset

#include "vars.h"

	double precision sumup
	external sumup

	integer Cptr, Dptr, Eptr
	integer Hel1, Hel2, Hel3, Hel4
	equivalence (Hel(1), Hel1)
	equivalence (Hel(2), Hel2)
	equivalence (Hel(3), Hel3)
	equivalence (Hel(4), Hel4)

      reset=.true.
	S = SInvariant(1,2)

	T = TInvariant(1,3)

	U = TInvariant(2,3)

	S = SInvariant(1,2)
	T = TInvariant(1,3)
	U = TInvariant(2,3)

	if( reset ) then
	  call setcachelast(Ccache, 0)
	  call setcachelast(Dcache, 0)
*	  call setcachelast(Ecache, 0)
	  call abbr1_s
	  reset = .FALSE.
	endif
	Cptr = getcachelast(Ccache)
	Dptr = getcachelast(Dcache)
*	Eptr = getcachelast(Ecache)

	call abbr1_angle


	result(1) = 0
	result(2) = 0

#define Test(i) if( .not. btest(helicities, 3*(4 - i) + 1 + Hel(i)) ) goto i

	do Hel1 = -1, 1
	Test(1)
	do Hel2 = -1, 1
	Test(2)
	do Hel3 = -1, 1
	Test(3)
	do Hel4 = -1, 1
	Test(4)

	call abbr1_hel

	Cloop(1) = 0

	call vert

	do cha5 = 1,2
	call vert_cha5
	call box_cha51
	call box_cha52
	call box_cha53
	enddo

	do his5 = 1,3
	call vert_his5
	enddo

	do lpd5 = 1,3
	call vert_lpd5
	call box_lpd51
	call box_lpd52
	enddo

	do qud5 = 1,3
	call vert_qud5
	call box_qud51
	call box_qud52
	enddo

	do quu5 = 1,3
	call vert_quu5
	call box_quu51
	call box_quu52
	enddo

	do sld5 = 1,3
	call vert_sld5
	enddo

	do sle5 = 1,3
	call vert_sle5
	enddo

	do sqd5 = 1,3
	call vert_sqd5
	enddo

	do sqe5 = 1,3
	call vert_sqe5
	enddo

	do squ5 = 1,3
	call vert_squ5
	enddo

	do sqv5 = 1,3
	call vert_sqv5
	enddo

	do his5 = 1,3
	do cha5 = 1,2
	call vert_cha5_his5
	enddo
	enddo

	do lpd5 = 1,3
	do his5 = 1,3
	call vert_his5_lpd5
	enddo
	enddo

	do qud5 = 1,3
	do his5 = 1,3
	call vert_his5_qud5
	enddo
	enddo

	do quu5 = 1,3
	do his5 = 1,3
	call vert_his5_quu5
	enddo
	enddo

	do sld5 = 1,3
	do his5 = 1,3
	call vert_his5_sld5
	enddo
	enddo

	do sle5 = 1,3
	do his5 = 1,3
	call vert_his5_sle5
	enddo
	enddo

	do sqd5 = 1,3
	do his5 = 1,3
	call vert_his5_sqd5
	enddo
	enddo

	do sqe5 = 1,3
	do his5 = 1,3
	call vert_his5_sqe5
	enddo
	enddo

	do squ5 = 1,3
	do his5 = 1,3
	call vert_his5_squ5
	enddo
	enddo

	do sqv5 = 1,3
	do his5 = 1,3
	call vert_his5_sqv5
	enddo
	enddo

	result(2) = result(2) + sumup(Cloop, Cloop)

4	enddo
3	enddo
2	enddo
1	enddo

	call setcachelast(Ccache, Cptr)
	call setcachelast(Dcache, Dptr)
*	call setcachelast(Ecache, Eptr)

#ifdef CHECK
	print *, 'S =', S
	print *, 'T =', T
	print *, 'U =', U

	print *, 'tree =', result(1)
	print *, 'loop =', result(2)
	stop
#endif
	end


************************************************************************

	double precision function sumup(CCloop, CCtree)
	implicit none

#include "vars.h"

	double complex CCloop(1), CCtree(1)
	double complex m

	sumup = 0

	m = 0
	m = m + CCloop(1)*1
	sumup = sumup + DBLE(DCONJG(CCtree(1))*m)
	end

